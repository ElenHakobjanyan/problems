#include <iostream>
#include <iomanip>
#include <fstream>
#include <string>
#include <map>
#include <vector>
#include <algorithm>

using namespace std;

bool addWordsToMap(string, map<string, int>&, int&);
void sortAsVec(map<string, int>&, vector<pair<string, int>>&);
void print(vector<pair<string, int>>&, int, int&);

int main()
{
	int count = 0;
	map<string, int> mp;
	addWordsToMap("war+peace.txt", mp, count);

	vector<pair<string, int>> vec;
	sortAsVec(mp, vec);

	print(vec, 100, count);	
	return 0;
}

bool addWordsToMap(string fname, map<string, int>& mp, int& count)
{
	ifstream fstream(fname);

	if (!fstream.is_open())
	{
		cerr << "Unable to open '" << fname << "' file\n";
		return false;
	}

	string buff;
	char n;

	while (fstream.get(n))
	{
		n = tolower(n);
		if (n >= 'a' && n <= 'z') buff += n;
		else
		{
			if (buff != "")
			{
				//cout << buff << " ";
				mp.insert_or_assign(buff, ++mp[buff]);
				count++;
			}
			buff = "";
		}
	}
	fstream.close();
	return true;
}

void sortAsVec(map<string,int>& mp, vector<pair<string, int>>& vec)
{
	// copy <key,value> pairs from the map to the vector
	copy(mp.begin(), mp.end(), back_inserter<vector<pair<string, int>>>(vec));

	// sort the vector by increasing the order of its pair's second value
	// if the second value is equal, order by the pair's first value
	sort(vec.begin(), vec.end(),
		[](const pair<string, int>& l, const pair<string, int>& r)
		{
			if (l.second != r.second)
			{
				return l.second > r.second;
			}
			return l.first > r.first;
		});
}

void print(vector<pair<string, int>>& vec, int N, int& count)
{
	if (N > vec.size()) N = vec.size();
	for (int i = 0; i < N; ++i)
	{
		cout << setw(3) << i + 1 << ". " << setw(8) << vec[i].first << ": " << setw(5) << vec[i].second
			<< " - " << (double)(vec[i].second * 100)/ count  << "%\n";
	}
}
